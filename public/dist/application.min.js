"use strict";var ApplicationConfiguration=function(){var applicationModuleName="material",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.utils","ngMaterial","lfNgMdFileInput"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.module(ApplicationConfiguration.applicationModuleName).config(["$mdThemingProvider",function($mdThemingProvider){$mdThemingProvider.theme("default").backgroundPalette("light-blue",{"default":"50"}).primaryPalette("blue").accentPalette("light-blue")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("users"),angular.module("core").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Home","core","dropdown","/","home"),Menus.addMenuItem("topbar","Courses","core","dropdown","/courses","arrow_forward"),Menus.addMenuItem("topbar","Challenges","core","dropdown","/challenges","arrow_forward")}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"}).state("courses",{url:"/courses",templateUrl:"modules/core/views/courses.client.view.html"}).state("challenges",{url:"/challenges/:courseId",templateUrl:"modules/core/views/challenges.client.view.html"}).state("editmcq",{url:"/challenges/edit/:challengeId/mcq",templateUrl:"modules/core/views/edit-mcq.client.view.html"}).state("editdnd",{url:"/challenges/edit/:challengeId/dnd",templateUrl:"modules/core/views/edit-dnd.client.view.html"}).state("editmicq",{url:"/challenges/edit/:challengeId/micq",templateUrl:"modules/core/views/edit-micq.client.view.html"}).state("editftb",{url:"/challenges/edit/:challengeId/ftb",templateUrl:"modules/core/views/edit-ftb.client.view.html"}).state("editpolygon",{url:"/challenges/edit/:challengeId/polygon",templateUrl:"modules/core/views/edit-polygon.client.view.html"})}]),angular.module("core").controller("ChallengesController",["$scope","Challenges","$location","$mdDialog","QueryParams","$http","sharedProperties",function($scope,Challenges,$location,$mdDialog,QueryParams,$http,sharedProperties){function showDialog($event){function DialogController($scope,$mdDialog,challenge,types,readTypes){$scope.challenge=challenge,$scope.types=types,$scope.selectedReadType=readTypes[0],$scope.readTypes=readTypes,$scope.closeDialog=function(){$mdDialog.hide()},$scope.addChallenge=function(){$scope.chooseType(),console.log(JSON.stringify($scope.challenge,null,"  ")),$scope.challenge.$save(function(err){$scope.closeDialog(),updateChallenges()})},$scope.openMenu=function($mdOpenMenu,ev){$mdOpenMenu(ev)},$scope.chooseType=function(index){index||(index=0),$scope.selectedReadType=readTypes[index],$scope.challenge.type=types[index],$scope.challenge.challengeFile=challengesFiles[index]}}var parentEl=angular.element(document.body);$mdDialog.show({parent:parentEl,targetEvent:$event,template:'<md-dialog aria-label="Challenge dialog">  <md-dialog-content>   <md-menu>       <md-button aria-label="Challenge type" class="md-raised md-primary" ng-click="openMenu($mdOpenMenu, $event)">           Type:{{selectedReadType}}       </md-button>       <md-menu-content width="4">           <md-menu-item ng-repeat="readType in readTypes">               <md-button ng-click="chooseType($index)"> {{readType}}              </md-button>           </md-menu-item>       </md-menu-content>   </md-menu>    <md-input-container>       <label>Challenge name</label>       <input type="text" ng-model="challenge.name">   </md-input-container>  </md-dialog-content>  <md-dialog-actions>    <md-button ng-click="closeDialog()" class="md-primary">      Close Dialog    </md-button>    <md-button ng-click="addChallenge()" class="md-primary">     Add Challenge    </md-button>  </md-dialog-actions></md-dialog>',locals:{challenge:$scope.challenge,types:$scope.types,readTypes:$scope.readTypes},controller:DialogController})}function updateChallenges(){$http.get("/courses/"+QueryParams.getCourseId()+"/challenges").success(function(res){console.log("success!!",res),$scope.challenges=[]}).error(function(err){console.log("error!!",err)})}$scope.types=["mcq","dnd","micq","ftb","polygon"],$scope.readTypes=["Multiple Choice Question","Drag And Drop","Multiple Image Choice Question","Fill The Options","Highlight Image Area"];var challengesFiles=[{"class":"es.eucm.cytochallenge.model.TextChallenge",imagePath:"",textControl:{"class":"es.eucm.cytochallenge.model.control.MultipleAnswerControl",text:"",answers:[],correctAnswer:0}},{"class":"es.eucm.cytochallenge.model.TextChallenge",imagePath:"",textControl:{"class":"es.eucm.cytochallenge.model.control.draganddrop.DragAndDropControl",text:"",canvasWidth:1024,canvasHeight:552,answers:[]}},{"class":"es.eucm.cytochallenge.model.TextChallenge",textControl:{"class":"es.eucm.cytochallenge.model.control.MultipleImageAnswerControl",text:"",answers:[],correctAnswers:[]}},{"class":"es.eucm.cytochallenge.model.TextChallenge",imagePath:"",textControl:{"class":"es.eucm.cytochallenge.model.control.filltheblank.FillTheBlankControl",text:"",statements:[]}},{"class":"es.eucm.cytochallenge.model.TextChallenge",imagePath:"",textControl:{"class":"es.eucm.cytochallenge.model.control.InteractiveZoneControl",text:"",canvasWidth:1024,canvasHeight:552,answers:[],correctAnswers:[]}}];$scope.showDialog=showDialog,updateChallenges(),$scope.challenge=new Challenges,$scope.challenge.type=$scope.types[0],$scope.go=function(challenge){sharedProperties.setChallenge(challenge),$location.path("/challenges/edit/"+challenge._id+"/"+challenge.type)}}]),angular.module("core").controller("ChallengesEditDndController",["$scope","Challenges","$location","$mdDialog","QueryParams","$http","sharedProperties",function($scope,Challenges,$location,$mdDialog,QueryParams,$http,sharedProperties){function drawText(){ctx.font=textHeight+"pt sans-serif";for(var i=0;i<$scope.mcqs.length;i++){var textObj=$scope.mcqs[i];ctx.fillStyle="white",ctx.fillRect(textObj.x,textObj.y,textObj.width,textObj.height),ctx.fillStyle="black",ctx.fillText(textObj.string,textObj.x+(textObj.width-ctx.measureText(textObj.string).width)/2,textObj.y+textHeight+(textObj.height-textHeight)/2)}}var canv=document.getElementById("board"),ctx=canv.getContext("2d"),textHeight=20;$scope.files=[{lfDataUrl:"",lfFileName:""}],$scope.mcqs=[];var updateCurrentChallengeModel=function(){var j=0;$scope.files&&$scope.files.length>0&&$scope.files[0].lfFileName&&($scope.challenge.challengeFile.imagePath=$scope.files[0].lfFileName),$scope.challenge.challengeFile.textControl.answers=[],$scope.mcqs.forEach(function(question){$scope.challenge.challengeFile.textControl.answers.push({text:question.string,x:question.x,y:canv.height-question.y,width:question.width,height:question.height}),++j}),$scope.challenge.$update(),queryChallenge()},challengeId=QueryParams.getChallengeId();$scope.onSubmit=function(){var formData=new FormData;return $scope.files&&$scope.files.length&&$scope.files[0].lfFile?(formData.append("files",$scope.files[0].lfFile),void $http.post("/upload/"+challengeId,formData,{transformRequest:angular.identity,headers:{"Content-Type":void 0,enctype:"multipart/form-data"}}).success(function(res){console.log("success!!",res),updateCurrentChallengeModel()}).error(function(err){console.log("error!!",err),updateCurrentChallengeModel()})):updateCurrentChallengeModel()};var thisFiles=$scope.files,imageObj=new Image;console.log("before query",$scope.files);var queryChallenge=function(){Challenges.query({id:challengeId}).$promise.then(function(res){console.log(JSON.stringify(res.challengeFile)),$scope.challenge=res,(!$scope.challenge.challengeFile||"string"==typeof $scope.challenge.challengeFile||$scope.challenge.challengeFile instanceof String)&&($scope.challenge.challengeFile={"class":"es.eucm.cytochallenge.model.TextChallenge",imagePath:"",textControl:{"class":"es.eucm.cytochallenge.model.control.draganddrop.DragAndDropControl",text:"",canvasWidth:1024,canvasHeight:552,answers:[]}});var i=0;res.challengeFile.imagePath&&(imageObj.src="uploads/"+res._id+"/"+res.challengeFile.imagePath,console.log(thisFiles),thisFiles[0].lfFileName=res.challengeFile.imagePath),$scope.mcqs[i]=[],$scope.challenge.challengeFile.textControl.answers.forEach(function(answer){$scope.mcqs[i]={string:answer.text,x:answer.x,y:canv.height-answer.y,width:answer.width,height:answer.height},++i}),draw()},function(error){console.log("error retrieving challenge",error)})};queryChallenge();var draw,mousedown,stopdrag,move,activeText,drawImageObj=function(){if(imageObj.isLoaded){var targetHeight=canv.height,targetWidth=canv.width,sourceHeight=imageObj.height,sourceWidth=imageObj.width,targetRatio=targetHeight/targetWidth,sourceRatio=sourceHeight/sourceWidth,scale=targetRatio>sourceRatio?targetWidth/sourceWidth:targetHeight/sourceHeight,width=sourceWidth*scale,height=sourceHeight*scale;ctx.drawImage(imageObj,.5*(targetWidth-width),.5*(targetHeight-height),width,height)}};$scope.$watchCollection("files",function(newValue,oldValue){newValue&&1===newValue.length&&(imageObj.src=newValue[0].lfDataUrl,imageObj.onload=function(){imageObj.isLoaded=!0,draw()})}),move=function(e){e.offsetX||(e.offsetX=e.pageX-$(e.target).offset().left,e.offsetY=e.pageY-$(e.target).offset().top);var textObj=$scope.mcqs[activeText];textObj.x=Math.round(e.offsetX)-textObj.width/2,textObj.y=Math.round(e.offsetY)-textObj.height/2,console.log("move",JSON.stringify(textObj,null,"  ")),draw()},stopdrag=function(){console.log("stopdrag"),canv.onmousemove=null,activeText=null};var i,contains=function(obj,x,y){return console.log("contains",JSON.stringify(obj,null,"  "),x,y),x>=obj.x&&x<obj.x+obj.width&&y>=obj.y&&y<obj.y+obj.height};mousedown=function(e){console.log("mousedown");var x,y;if(3===e.which)return!1;for(e.preventDefault(),e.offsetX||(e.offsetX=e.pageX-$(e.target).offset().left,e.offsetY=e.pageY-$(e.target).offset().top),x=e.offsetX,y=e.offsetY,i=0;i<$scope.mcqs.length;i++)if(console.log("looping",i),contains($scope.mcqs[i],x,y))return console.log("contains"),activeText=i,canv.onmousemove=move,!1;return!1},draw=function(){ctx.clearRect(0,0,canv.width,canv.height),drawImageObj(),drawText()},canv.onmousedown=mousedown,canv.onmouseup=stopdrag,$scope.draw=draw,$scope.$watchCollection("mcqs",function(){draw()}),$scope.addToList=function(list,object){$scope[list]||($scope[list]=[]),$scope[list].push(object)},$scope.deleteFromList=function(list,object){var index=$scope[list].indexOf(object);index>-1&&$scope[list].splice(index,1)},$scope.addOption=function(){$scope.addToList("mcqs",{string:"",x:canv.width/2,y:canv.height/2,width:textHeight,height:2*textHeight})},$scope.textChanged=function(option){option.width=ctx.measureText(option.string).width+textHeight,console.log(option.width),draw()}}]),angular.module("core").controller("ChallengesEditFtbController",["$scope","Challenges","$location","$mdDialog","QueryParams","$http","sharedProperties",function($scope,Challenges,$location,$mdDialog,QueryParams,$http,sharedProperties){function showDialog($event,options,option){function DialogController($scope,$mdDialog,opts,opt){$scope.opt=opt,$scope.addChoices=function(){opts.push(opt),$scope.closeDialog()},$scope.closeDialog=function(){$mdDialog.hide()},$scope.removeChoice=function(choice){var index=opt.choices.indexOf(choice);index>-1&&opt.choices.splice(index,1)},$scope.addChoice=function(){opt.choices.push({string:"",isCorrect:0===opt.choices.length})},$scope.checkCorrect=function(opt,choice){choice.isCorrect&&opt.choices.forEach(function(elem){elem!==choice&&(elem.isCorrect=!1)})}}var parentEl=angular.element(document.body);$mdDialog.show({parent:parentEl,targetEvent:$event,template:'<md-dialog aria-label="Challenge dialog">  <md-dialog-content><div flex><strong>Choices</strong><md-button ng-click="addChoice()" class="md-icon-button" aria-label="Add choices"><md-icon md-font-set="material-icons">add</md-icon></md-button></div><div layout="column" flex><div ng-repeat="option in opt.choices">    <div layout="row" layout-align="center" flex><md-input-container flex><label>Choice {{$index + 1}}</label><input ng-model="option.string">    </md-input-container>    <md-button aria-label="Remove" ng-click="removeChoice(option)" class="md-icon-button">       <md-icon md-font-set="material-icons">remove</md-icon>    </md-button><md-checkbox ng-model="option.isCorrect" ng-change="checkCorrect(opt, option)" aria-label="Is a correct option">    </md-checkbox>               </div>              </div>              </div>  </md-dialog-content>  <md-dialog-actions>    <md-button ng-click="closeDialog()" class="md-primary">      Close Dialog    </md-button>    <md-button ng-click="addChoices()" class="md-primary">     Add Choice    </md-button>  </md-dialog-actions></md-dialog>',locals:{opts:options,opt:option},controller:DialogController})}$scope.mcqs=[];var updateCurrentChallengeModel=function(){$scope.challenge.challengeFile.textControl.statements=[],console.log(JSON.stringify($scope.mcqs,null,"  ")),$scope.mcqs.forEach(function(statements){var statement={text:"",options:[],correctAnswers:[]},numChoice=0;statements.forEach(function(option){if("text"===option.type)statement.text+=option.string;else if("choice"===option.type){statement.text+="["+numChoice+"]";var correctChoice=0,choicesString=[];option.choices.forEach(function(choice){choicesString.push(choice.string),choice.isCorrect&&statement.correctAnswers.push(correctChoice),++correctChoice}),statement.options.push(choicesString),++numChoice}}),$scope.challenge.challengeFile.textControl.statements.push(statement)}),console.log(JSON.stringify($scope.challenge,null,"  ")),$scope.challenge.$update(),queryChallenge()},challengeId=QueryParams.getChallengeId();$scope.onSubmit=function(){updateCurrentChallengeModel()};var queryChallenge=function(){Challenges.query({id:challengeId}).$promise.then(function(res){console.log(JSON.stringify(res.challengeFile)),$scope.challenge=res,(!$scope.challenge.challengeFile||"string"==typeof $scope.challenge.challengeFile||$scope.challenge.challengeFile instanceof String)&&($scope.challenge.challengeFile={"class":"es.eucm.cytochallenge.model.TextChallenge",imagePath:"",textControl:{"class":"es.eucm.cytochallenge.model.control.filltheblank.FillTheBlankControl",text:"",statements:[]}});var i=0;$scope.challenge.challengeFile.textControl.statements.forEach(function(answer){var text=answer.text;if(text){$scope.mcqs[i]=[];var slices=text.split(/(\[\d+\])+/);console.log(slices);var j=0;slices.forEach(function(slice){if(slice)if(0===slice.indexOf("[")){var choices=[],x=0;answer.options[j].forEach(function(opt){choices.push({string:opt,isCorrect:x===answer.correctAnswers[j]}),++x}),$scope.mcqs[i].push({type:"choice",choices:choices}),++j}else $scope.mcqs[i].push({type:"text",string:slice})})}++i}),console.log("query",JSON.stringify($scope.mcqs,null,"  "))},function(error){console.log("error retrieving challenge",error)})};queryChallenge(),$scope.addToList=function(list,object){$scope[list]||($scope[list]=[]),$scope[list].push(object)},$scope.deleteFromList=function(list,object){var index=$scope[list].indexOf(object);index>-1&&$scope[list].splice(index,1)},$scope.addOptions=function(){$scope.addToList("mcqs",[])},$scope.addOption=function(options,index,event){if(console.log(JSON.stringify(options,null,"  ")),0===index)options.push({type:"text",string:""});else{var option={type:"choice",choices:[]};showDialog(event,options,option)}}}]),angular.module("core").controller("ChallengesEditMcqController",["$scope","Challenges","$location","$mdDialog","QueryParams","$http","sharedProperties",function($scope,Challenges,$location,$mdDialog,QueryParams,$http,sharedProperties){$scope.files=[{lfDataUrl:"",lfFileName:""}],$scope.mcqs=[];var updateCurrentChallengeModel=function(){var j=0;$scope.files&&$scope.files.length>0&&$scope.files[0].lfFileName&&($scope.challenge.challengeFile.imagePath=$scope.files[0].lfFileName),$scope.challenge.challengeFile.textControl.answers=[],$scope.mcqs.forEach(function(question){$scope.challenge.challengeFile.textControl.answers.push(question.string),question.isCorrect&&($scope.challenge.challengeFile.textControl.correctAnswer=j),++j}),$scope.challenge.$update(),queryChallenge()},challengeId=QueryParams.getChallengeId();$scope.onSubmit=function(){var formData=new FormData;return $scope.files&&$scope.files.length&&$scope.files[0].lfFile?(formData.append("files",$scope.files[0].lfFile),void $http.post("/upload/"+challengeId,formData,{transformRequest:angular.identity,headers:{"Content-Type":void 0,enctype:"multipart/form-data"}}).success(function(res){console.log("success!!",res),updateCurrentChallengeModel()}).error(function(err){console.log("error!!",err),updateCurrentChallengeModel()})):updateCurrentChallengeModel()};var thisFiles=$scope.files,imageObj=new Image;console.log("before query",$scope.files);var queryChallenge=function(){Challenges.query({id:challengeId}).$promise.then(function(res){console.log(JSON.stringify(res.challengeFile)),$scope.challenge=res,(!$scope.challenge.challengeFile||"string"==typeof $scope.challenge.challengeFile||$scope.challenge.challengeFile instanceof String)&&($scope.challenge.challengeFile={"class":"es.eucm.cytochallenge.model.TextChallenge",imagePath:"",textControl:{"class":"es.eucm.cytochallenge.model.control.MultipleAnswerControl",text:"",answers:[],correctAnswer:0}});var i=0;imageObj.src="uploads/"+res._id+"/"+res.challengeFile.imagePath,console.log(thisFiles),thisFiles[0].lfFileName=res.challengeFile.imagePath,$scope.challenge.challengeFile.textControl.answers.forEach(function(answer){$scope.mcqs[i]={string:answer,isCorrect:i===$scope.challenge.challengeFile.textControl.correctAnswer},++i})},function(error){console.log("error retrieving challenge",error)})};queryChallenge();var canv=document.getElementById("board"),ctx=canv.getContext("2d");$scope.$watchCollection("files",function(newValue,oldValue){newValue&&1===newValue.length&&(imageObj.src=newValue[0].lfDataUrl,imageObj.onload=function(){var targetHeight=canv.height,targetWidth=canv.width,sourceHeight=imageObj.height,sourceWidth=imageObj.width,targetRatio=targetHeight/targetWidth,sourceRatio=sourceHeight/sourceWidth,scale=targetRatio>sourceRatio?targetWidth/sourceWidth:targetHeight/sourceHeight,width=sourceWidth*scale,height=sourceHeight*scale;ctx.clearRect(0,0,targetWidth,targetHeight),ctx.drawImage(this,.5*(targetWidth-width),.5*(targetHeight-height),width,height)})}),$scope.addToList=function(list,object){$scope[list]||($scope[list]=[]),$scope[list].push(object)},$scope.deleteFromList=function(list,object){var index=$scope[list].indexOf(object);index>-1&&$scope[list].splice(index,1)},$scope.addOption=function(){$scope.addToList("mcqs",{string:"",isCorrect:!1})}}]),angular.module("core").controller("ChallengesEditMicqController",["$scope","Challenges","$location","$mdDialog","QueryParams","$http","sharedProperties",function($scope,Challenges,$location,$mdDialog,QueryParams,$http,sharedProperties){$scope.files=[{lfDataUrl:"",lfFileName:""},{lfDataUrl:"",lfFileName:""},{lfDataUrl:"",lfFileName:""},{lfDataUrl:"",lfFileName:""}],$scope.mcqs=[{isCorrect:!1},{isCorrect:!1},{isCorrect:!1},{isCorrect:!1}];var updateCurrentChallengeModel=function(){if($scope.files&&$scope.files.length>3&&$scope.files[0].length&&$scope.files[1].length&&$scope.files[2].length&&$scope.files[3].length){$scope.challenge.challengeFile.textControl.answers=[];for(var i=0;4>i;++i)$scope.files[i][0].lfFileName&&$scope.challenge.challengeFile.textControl.answers.push($scope.files[i][0].lfFileName)}var j=0;$scope.challenge.challengeFile.textControl.correctAnswers=[],$scope.mcqs.forEach(function(question){question.isCorrect&&$scope.challenge.challengeFile.textControl.correctAnswers.push(j),++j}),$scope.challenge.$update(),queryChallenge()},challengeId=QueryParams.getChallengeId();$scope.onSubmit=function(){var formData=new FormData;return $scope.files&&$scope.files.length&&$scope.files[0].length&&$scope.files[1].length&&$scope.files[2].length&&$scope.files[3].length?(angular.forEach($scope.files,function(obj){formData.append("files[]",obj[0].lfFile)}),void $http.post("/uploads/"+challengeId,formData,{transformRequest:angular.identity,headers:{"Content-Type":void 0,enctype:"multipart/form-data"}}).success(function(res){console.log("success!!",res),updateCurrentChallengeModel()}).error(function(err){console.log("error!!",err),updateCurrentChallengeModel()})):updateCurrentChallengeModel()};var imageObj=($scope.files,new Image),queryChallenge=function(){Challenges.query({id:challengeId}).$promise.then(function(res){console.log(JSON.stringify(res.challengeFile)),$scope.challenge=res,(!$scope.challenge.challengeFile||"string"==typeof $scope.challenge.challengeFile||$scope.challenge.challengeFile instanceof String)&&($scope.challenge.challengeFile={"class":"es.eucm.cytochallenge.model.TextChallenge",textControl:{"class":"es.eucm.cytochallenge.model.control.MultipleImageAnswerControl",text:"",answers:[],correctAnswers:[]}});var i=0;$scope.mcqs[0].isCorrect=!1,$scope.mcqs[1].isCorrect=!1,$scope.mcqs[2].isCorrect=!1,$scope.mcqs[3].isCorrect=!1,$scope.challenge.challengeFile.textControl.correctAnswers&&$scope.challenge.challengeFile.textControl.correctAnswers.forEach(function(answer){$scope.mcqs[answer].isCorrect=!0,++i}),$scope.challenge.challengeFile.textControl.answers&&(i=0,$scope.challenge.challengeFile.textControl.answers.forEach(function(answer){popImage({lfDataUrl:"uploads/"+res._id+"/"+answer},new Image,i),++i}))},function(error){console.log("error retrieving challenge",error)})};queryChallenge();for(var canv=document.getElementById("board"),ctx=canv.getContext("2d"),popImage=function(file,image,index){image.src=file.lfDataUrl,image.onload=function(){var targetHeight=canv.height/2,targetWidth=canv.width/2,sourceHeight=image.height,sourceWidth=image.width,targetRatio=targetHeight/targetWidth,sourceRatio=sourceHeight/sourceWidth,scale=targetRatio>sourceRatio?targetWidth/sourceWidth:targetHeight/sourceHeight,width=sourceWidth*scale,height=sourceHeight*scale,x=0,y=0;0===index?(x=0,y=0):1===index?(x=targetWidth,y=0):2===index?(x=0,y=targetHeight):(x=targetWidth,y=targetHeight),ctx.clearRect(x,y,targetWidth,targetHeight),ctx.drawImage(image,x+.5*(targetWidth-width),y+.5*(targetHeight-height),width,height)}},checkImage=function(index){return function(newValue,oldValue){newValue&&1===newValue.length&&popImage(newValue[0],imageObj,index)}},i=0;4>i;++i)$scope.$watchCollection("files["+i+"]",checkImage(i));$scope.addToList=function(list,object){$scope[list]||($scope[list]=[]),$scope[list].push(object)},$scope.deleteFromList=function(list,object){var index=$scope[list].indexOf(object);index>-1&&$scope[list].splice(index,1)},$scope.addOption=function(){$scope.addToList("mcqs",{isCorrect:!1})}}]),angular.module("core").controller("ChallengesEditPolygonController",["$scope","Challenges","$location","$mdDialog","QueryParams","$http","sharedProperties",function($scope,Challenges,$location,$mdDialog,QueryParams,$http,sharedProperties){var canv=document.getElementById("board"),ctx=canv.getContext("2d");$scope.files=[{lfDataUrl:"",lfFileName:""}],$scope.mcqs=[];var updateCurrentChallengeModel=function(){var j=0;$scope.files&&$scope.files.length>0&&$scope.files[0].lfFileName&&($scope.challenge.challengeFile.imagePath=$scope.files[0].lfFileName),$scope.challenge.challengeFile.textControl.answers=[],$scope.challenge.challengeFile.textControl.correctAnswers=[],$scope.mcqs.forEach(function(question){if(question.points.length>5){for(var polygon=[],i=0;i<question.points.length;i+=2)polygon.push(question.points[i]),polygon.push(canv.height-question.points[i+1]);$scope.challenge.challengeFile.textControl.answers.push(polygon),question.isCorrect&&$scope.challenge.challengeFile.textControl.correctAnswers.push(j),++j}}),$scope.challenge.$update(),queryChallenge()},challengeId=QueryParams.getChallengeId();$scope.onSubmit=function(){var formData=new FormData;return $scope.files&&$scope.files.length&&$scope.files[0].lfFile?(formData.append("files",$scope.files[0].lfFile),void $http.post("/upload/"+challengeId,formData,{transformRequest:angular.identity,headers:{"Content-Type":void 0,enctype:"multipart/form-data"}}).success(function(res){console.log("success!!",res),updateCurrentChallengeModel()}).error(function(err){console.log("error!!",err),updateCurrentChallengeModel()})):updateCurrentChallengeModel()};var thisFiles=$scope.files,imageObj=new Image;console.log("before query",$scope.files);var queryChallenge=function(){Challenges.query({id:challengeId}).$promise.then(function(res){console.log(JSON.stringify(res.challengeFile)),$scope.challenge=res,(!$scope.challenge.challengeFile||"string"==typeof $scope.challenge.challengeFile||$scope.challenge.challengeFile instanceof String)&&($scope.challenge.challengeFile={"class":"es.eucm.cytochallenge.model.TextChallenge",imagePath:"",textControl:{"class":"es.eucm.cytochallenge.model.control.InteractiveZoneControl",text:"",canvasWidth:1024,canvasHeight:552,answers:[],correctAnswers:[]}});var i=0;res.challengeFile.imagePath&&(imageObj.src="uploads/"+res._id+"/"+res.challengeFile.imagePath,console.log(thisFiles),thisFiles[0].lfFileName=res.challengeFile.imagePath),$scope.challenge.challengeFile.textControl.answers.forEach(function(answer){for(var pointsPoly=[],j=0;j<answer.length;j+=2)pointsPoly.push(answer[j]),pointsPoly.push(canv.height-answer[j+1]);$scope.mcqs[i]={points:pointsPoly,isCorrect:-1!==$scope.challenge.challengeFile.textControl.correctAnswers.indexOf(i)},++i}),draw()},function(error){console.log("error retrieving challenge",error)})};queryChallenge();var draw,mousedown,stopdrag,move,rightclick,drawImageObj=function(){if(imageObj.isLoaded){var targetHeight=canv.height,targetWidth=canv.width,sourceHeight=imageObj.height,sourceWidth=imageObj.width,targetRatio=targetHeight/targetWidth,sourceRatio=sourceHeight/sourceWidth,scale=targetRatio>sourceRatio?targetWidth/sourceWidth:targetHeight/sourceHeight,width=sourceWidth*scale,height=sourceHeight*scale;ctx.drawImage(imageObj,.5*(targetWidth-width),.5*(targetHeight-height),width,height)}};$scope.$watchCollection("files",function(newValue,oldValue){newValue&&1===newValue.length&&(imageObj.src=newValue[0].lfDataUrl,imageObj.onload=function(){imageObj.isLoaded=!0,draw()})});var activePoint;move=function(e){e.offsetX||(e.offsetX=e.pageX-$(e.target).offset().left,e.offsetY=e.pageY-$(e.target).offset().top);var points=$scope.mcqs[$scope.mcqs.length-1].points;points[activePoint]=Math.round(e.offsetX),points[activePoint+1]=Math.round(e.offsetY),draw()},stopdrag=function(){canv.onmousemove=null,activePoint=null},rightclick=function(e){e.preventDefault(),e.offsetX||(e.offsetX=e.pageX-$(e.target).offset().left,e.offsetY=e.pageY-$(e.target).offset().top);for(var points=$scope.mcqs[$scope.mcqs.length-1].points,x=e.offsetX,y=e.offsetY,i=0;i<points.length;i+=2){var dis=Math.sqrt(Math.pow(x-points[i],2)+Math.pow(y-points[i+1],2));if(6>dis)return points.splice(i,2),draw(),!1}return!1};var i;mousedown=function(e){var x,y,dis,lineDis,points=$scope.mcqs[$scope.mcqs.length-1].points,insertAt=points.length;if(3===e.which)return!1;for(e.preventDefault(),e.offsetX||(e.offsetX=e.pageX-$(e.target).offset().left,e.offsetY=e.pageY-$(e.target).offset().top),x=e.offsetX,y=e.offsetY,i=0;i<points.length;i+=2)if(dis=Math.sqrt(Math.pow(x-points[i],2)+Math.pow(y-points[i+1],2)),6>dis)return activePoint=i,canv.onmousemove=move,!1;for(i=0;i<points.length;i+=2)i>1&&(lineDis=dotLineLength(x,y,points[i],points[i+1],points[i-2],points[i-1],!0),6>lineDis&&(insertAt=i));return points.splice(insertAt,0,Math.round(x),Math.round(y)),activePoint=insertAt,canv.onmousemove=move,draw(),!1},draw=function(){ctx.canvas.width=ctx.canvas.width;var points=$scope.mcqs[$scope.mcqs.length-1].points;return points.length<2?!1:($scope.mcqs.forEach(function(polygon){var points=polygon.points;ctx.globalCompositeOperation="destination-over",ctx.fillStyle="rgb(255,255,255)",ctx.strokeStyle=polygon.isCorrect?"rgb(20, 255, 20)":"rgb(255,20,20)",ctx.lineWidth=1,ctx.beginPath(),ctx.moveTo(points[0],points[1]);for(var i=0;i<points.length;i+=2)ctx.fillRect(points[i]-2,points[i+1]-2,4,4),ctx.strokeRect(points[i]-2,points[i+1]-2,4,4),points.length>2&&i>1&&ctx.lineTo(points[i],points[i+1]);ctx.closePath(),ctx.fillStyle=polygon.isCorrect?"rgba(0,255,0,0.3)":"rgba(255,0,0,0.3)",ctx.fill(),ctx.stroke()}),drawImageObj(),void console.log(JSON.stringify(points,null,"   ")))},canv.onmousedown=mousedown,canv.oncontextmenu=rightclick,canv.onmouseup=stopdrag,$scope.draw=draw;var dotLineLength=function(x,y,x0,y0,x1,y1,o){function lineLength(x,y,x0,y0){return Math.sqrt((x-=x0)*x+(y-=y0)*y)}if(!o||(o=function(x,y,x0,y0,x1,y1){var x10=x1-x0;if(!x10)return{x:x0,y:y};var y10=y1-y0;if(!y10)return{x:x,y:y0};var left,tg=-1/((y1-y0)/(x1-x0));return{x:left=(x1*(x*tg-y+y0)+x0*(x*-tg+y-y1))/(tg*(x1-x0)+y0-y1),y:tg*left-tg*x+y}}(x,y,x0,y0,x1,y1),o.x>=Math.min(x0,x1)&&o.x<=Math.max(x0,x1)&&o.y>=Math.min(y0,y1)&&o.y<=Math.max(y0,y1))){var a=y0-y1,b=x1-x0,c=x0*y1-y0*x1;return Math.abs(a*x+b*y+c)/Math.sqrt(a*a+b*b)}var l1=lineLength(x,y,x0,y0),l2=lineLength(x,y,x1,y1);return l1>l2?l2:l1};$scope.addToList=function(list,object){$scope[list]||($scope[list]=[]),$scope[list].push(object)},$scope.deleteFromList=function(list,object){var index=$scope[list].indexOf(object);index>-1&&$scope[list].splice(index,1),draw()},$scope.addOption=function(){(0===$scope.mcqs.length||$scope.mcqs[$scope.mcqs.length-1].points.length>5)&&$scope.addToList("mcqs",{points:[],isCorrect:!1})}}]),angular.module("core").controller("CoursesController",["$scope","Courses","$location","$mdDialog","QueryParams","$http","sharedProperties",function($scope,Courses,$location,$mdDialog,QueryParams,$http,sharedProperties){function showDialog($event){function DialogController($scope,$mdDialog,course){$scope.course=course,$scope.closeDialog=function(){$mdDialog.hide()},$scope.addCourse=function(){$scope.chooseType(),console.log(JSON.stringify($scope.course,null,"  ")),$scope.course.$save(function(err){$scope.closeDialog(),updateCourses()})}}var parentEl=angular.element(document.body);$mdDialog.show({parent:parentEl,targetEvent:$event,template:'<md-dialog aria-label="Course dialog">  <md-dialog-content>    <md-input-container>       <label>Course name</label>       <input type="text" ng-model="course.name">   </md-input-container>  </md-dialog-content>  <md-dialog-actions>    <md-button ng-click="closeDialog()" class="md-primary">      Close Dialog    </md-button>    <md-button ng-click="addCourse()" class="md-primary">     Add Challenge    </md-button>  </md-dialog-actions></md-dialog>',locals:{course:$scope.course},controller:DialogController})}function updateCourses(){$scope.courses=Courses.get(function(){console.log($scope.courses)})}$scope.showDialog=showDialog,updateCourses(),$scope.course=new Course,$scope.go=function(course){sharedProperties.setChallenge(course),$location.path("/challenges/"+course._id)}}]),angular.module("core").controller("HeaderController",["$scope","$location","Authentication","Menus","$timeout","$mdSidenav","$mdUtil","$log",function($scope,$location,Authentication,Menus,$timeout,$mdSidenav,$mdUtil,$log){
function buildToggler(navID){var debounceFn=$mdUtil.debounce(function(){$mdSidenav(navID).toggle().then(function(){$log.debug("toggle "+navID+" is done")})},300);return debounceFn}$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1}),$scope.go=function(path){$location.path(path)},$scope.toggleLeft=buildToggler("left"),$scope.toggleRight=buildToggler("right")}]).controller("LeftCtrl",["$scope","$timeout","$mdSidenav","$log",function($scope,$timeout,$mdSidenav,$log){$scope.close=function(){$mdSidenav("left").close().then(function(){$log.debug("close LEFT is done")})}}]).controller("RightCtrl",["$scope","$timeout","$mdSidenav","$log",function($scope,$timeout,$mdSidenav,$log){$scope.close=function(){$mdSidenav("right").close().then(function(){$log.debug("close RIGHT is done")})}}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("sharedProperties",function(){var currentChallenge={};return{getChallenge:function(){return currentChallenge},setChallenge:function(value){currentChallenge=value}}}).factory("Challenges",["$resource",function($resource){return $resource("/challenges/:id",{id:"@_id"},{update:{method:"PUT"},query:{method:"GET",isArray:!1},get:{method:"GET",isArray:!0}})}]).factory("Courses",["$resource",function($resource){return $resource("/courses/:id",{id:"@_id"},{update:{method:"PUT"},query:{method:"GET",isArray:!1},get:{method:"GET",isArray:!0}})}]).factory("QueryParams",[function(){return{getChallengeId:function(){var result=window.location.hash.substr(19,24);return result},getCourseId:function(){var result=window.location.hash.substr(11,24);return result}}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,icon,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender,icon:icon}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:Authentication.user=null,$location.path("signin")}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("socialAccounts",{url:"/settings/accounts/social",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"}).state("editAccountsAdmin",{url:"/settings/accounts/:userId/edit/admin",templateUrl:"modules/users/views/settings/edit-profile-admin.client.view.html"}).state("listAccounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/manage-user-accounts.client.view.html"}).state("createAccounts",{url:"/settings/accounts/create",templateUrl:"modules/users/views/settings/create-user-accounts.client.view.html"}).state("resetAccounts",{url:"/settings/accounts/reset/:userId",templateUrl:"modules/users/views/settings/reset-user-accounts.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$window","$stateParams","$http","$location","Users","Authentication","$mdDialog",function($scope,$window,$stateParams,$http,$location,Users,Authentication,$mdDialog){$scope.user=Authentication.user,$scope.go=function(path){$location.path(path)},$scope.user||$location.path("/signin"),$scope.user.forcePasswordChange===!0&&$location.path("/settings/password"),$scope.pageSize=10,$scope.sortType="username",$scope.sortReverse=!1,$scope.selectedRow="",$scope.setSelectedRow=function(selectedRow){$scope.selectedRow!==selectedRow?$scope.selectedRow=selectedRow:$scope.selectedRow=void 0},$scope.find=function(){$scope.users=Users.user.query()},$scope.$watchCollection("updateUser",function(newValue){void 0!==newValue&&($scope.selectedRow=newValue[0],console.log($scope.selectedRow))}),$scope.findOne=function(){$scope.updateUser=Users.user.query({userId:$stateParams.userId})},$scope.createAccount=function(){$scope.success=$scope.error=null,$http.post("/auth/create",$scope.credentials).success(function(response){$scope.success=!0,$location.path("/settings/accounts")}).error(function(response){$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null;var user=$scope.selectedRow;$http.post("/settings/accounts/reset/"+user._id,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,$location.path("/settings/accounts")}).error(function(response){$scope.error=response.message})},$scope.remove=function(user){var removeUserAccount=user,confirm=$mdDialog.confirm().parent(angular.element(document.body)).title("Would you like to delete "+user.username+"?").content("Confirm you wish to carry out this operation").ariaLabel("Delete").ok("Please do it!").cancel("No my mistake");$mdDialog.show(confirm).then(function(){removeUserAccount.$remove(function(){$location.path("/settings/accounts");for(var i in $scope.users)$scope.users[i]===removeUserAccount&&$scope.users.splice(i,1)})},function(){$scope.alert="You decided to keep "+user.username})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users.updateUser($scope.selectedRow);user.$update(function(response){$scope.success=!0,$location.path("/settings/accounts")},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.update=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users.profile($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){Authentication.user=response.user,$scope.success=!0,$scope.passwordDetails=null,$location.path("/pilots")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return{profile:$resource("users",{},{update:{method:"PUT"}}),user:$resource("settings/accounts/:userId",{userId:"@_id"},{update:{method:"PUT"}}),updateUser:$resource("/settings/accounts/edit/admin/:userId",{userId:"@_id"},{update:{method:"POST"}})}}]);